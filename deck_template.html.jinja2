<!doctype html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />
        <link rel="stylesheet" type="text/css" href="{{stylesheet}}" />
        {%- if custom_header %}{{ custom_header }}{% endif %}
    <style>
        body {
            padding: 1mm;
            margin: 0;
            font-size: 0; /* This eliminates the space for inline-block elements (the cards) */
        }

        .pycard {
            display: inline-block;
            position: relative;
            margin-right: {{ card_spacing }};
            margin-bottom: {{ card_spacing }};
            padding: 0;
            font-size: default; /* Sets default card text to a visible size */
        }

        .__icon {
            height: 1em; /* Size relative to text */
            position: relative;
            top: 0.125em;
        }

        s.__icon {
            font-size: 0.8em;
            background-color: #ff8888;
            border: 1px solid #ff0000;
            color: #880000;
            top: -0.125em;
        }

        @media print {
            div.pycard * {
                page-break-inside: avoid;
            }
        }
    </style>
    </head>
    <body>
        {%- for card in rendered_cards %}
        <div class="pycard">
            {{ card }}
        </div>
        {%- endfor %}
        <script>
            // Make icon paths work consistently whether using http: or file:
            if (window.location.protocol == 'file:') {
                for (let img of document.getElementsByTagName('img')) {
                    if (img.attributes.src.value.startsWith('/')) {
                        img.src = '{{absolute_to_relative}}' + img.attributes.src.value
                    }
                }
            }

            // Automatically size .autosize text to fit its container
            for (let element of document.getElementsByClassName('autosize')) {
                let box = element.getBoundingClientRect()
                let parent = element.parentElement
                let parentBox = parent.getBoundingClientRect()
                let parentStyle = window.getComputedStyle(parent)
                let parentWidth = (
                    parentBox.width
                    - parseFloat(parentStyle.getPropertyValue('padding-left'))
                    - parseFloat(parentStyle.getPropertyValue('padding-right'))
                )
                if (box.width > parentWidth) {
                    let style = window.getComputedStyle(element)
                    let fontSizeRaw = style.getPropertyValue('font-size')
                    let fontSize = parseFloat(fontSizeRaw)
                    let fontUnit = fontSizeRaw.replace(/[^a-z]/g, '')
                    let targetSize = `${fontSize * parentWidth / box.width}${fontUnit}`
                    element.style.fontSize = targetSize
                }
            }
        </script>
    </body>
</html>
